{-# STDLIB_VERSION 3 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

func depositImpl(pmt:AttachedPayment, caller:Address) = {
    if (isDefined(pmt.assetId))
        then throw("can hodl waves only at the moment")
    else {
        let currentKey = toBase58String(caller.bytes)
        let currentAmount = match getInteger(this, currentKey) {
            case a:Int => a
            case _ => 0
        }
        let newAmount = currentAmount + pmt.amount
        WriteSet([DataEntry(currentKey, newAmount)])
    }
}

@Callable(i)
func default() = {
    depositImpl(extract(i.payment), i.caller)
}

@Callable(i)
func deposit() = {
    depositImpl(extract(i.payment), i.caller)
}

@Callable(i)
func withdraw(amount: Int, donate: Boolean, name: String, vec: ByteVector) = {
    let expectedVec = toBytes("Hello, Ride4DApp!")
    let donationAddress = extract(addressFromString("$donationAddressInjection"));

    let withdrawTotal =  if (donate) then 2 * amount else amount
    let currentKey = toBase58String(i.caller.bytes)
    let currentAmount = match getInteger(this, currentKey) {
        case a:Int => a
        case _ => 0
    }
    let newAmount = currentAmount - withdrawTotal
    if (withdrawTotal < 0)
        then throw("Can't withdraw negative amount")
    else if (newAmount < 0)
        then throw("Not enough balance")
    else if (expectedVec != vec)
        then throw("vec parameter doesn't match expected value")
    else
        ScriptResult(WriteSet([DataEntry(currentKey, newAmount),
                              DataEntry(name + " Total", withdrawTotal),
                              DataEntry(name + " Donation", amount)
                              ]),

                    TransferSet([ScriptTransfer(i.caller, amount, unit),
                                 ScriptTransfer(donationAddress, amount, unit)
                                ]))
}

@Verifier(tx)
func verify() = {
    true
}
